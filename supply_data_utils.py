import asyncio
import aiohttp
from utils_warehouse import load_api_tokens
import pandas as pd


async def get_supplies_list(account, api_token):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –ø–æ —Å–∏—Å—Ç–µ–º–µ –§–ë–°"""
    print(f"üü° –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è {account}")
    # –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
    supplies_list_api = []
    # –ê–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞
    url = 'https://marketplace-api.wildberries.ru/api/v3/supplies'
    headers = {'Authorization': api_token}
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ
    delay = 0.3
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    limit = 1000
    # –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    next_page = 0
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    max_attempts = 10
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempt = 0
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ http –∑–∞–ø—Ä–æ—Å–∞
    async with aiohttp.ClientSession(headers=headers) as session:
        # –¶–∏–∫–ª –∏–∑ 10 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        while attempt != max_attempts:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {'limit' : limit,
                    'next' : next_page}
            try:
                # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
                async with session.get(url, params=params) as res:
                    if res.status == 200:
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                        attempt = 0
                        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π http –∑–∞–ø—Ä–æ—Å
                        data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫
                        supplies = data['supplies']
                        # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –æ–± –õ–ö
                        for supply in supplies:
                            supply['account'] = account
                        # –î–æ–±–∞–≤–ª—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                        supplies_list_api.extend(supplies)
                        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è
                        if not supplies or data['next'] == 0:
                            break
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                        else:
                            next_page = data['next']
                            # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ê–ü–ò –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                            await asyncio.sleep(delay)
                        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(supplies_list_api)} –ø–æ—Å—Ç–∞–≤–∫–∞—Ö")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    elif res.status == 400:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        error_data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É message. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤—ã–≤–µ–¥–µ–º '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
                        error_detail = error_data.get('message', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
                        print(f"–û—à–∏–±–∫–∞ 400 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        return None 
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö 
                    elif res.status == 401:
                        print(f"–û—à–∏–±–∫–∞ 401 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                        return None
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    elif res.status == 403:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        error_data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É message. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤—ã–≤–µ–¥–µ–º '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
                        error_detail = error_data.get('message', '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
                        print(f"–û—à–∏–±–∫–∞ 403 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        return None
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                    elif res.status == 429:
                        error_data = await res.json()
                        error_detail = error_data.get('detail', '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
                        print(f"–û—à–∏–±–∫–∞ 429 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        print(f"–õ–∏–º–∏—Ç: 300 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 1 –º–∏–Ω—É—Ç—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç. –∂–¥–µ–º {delay}")
                        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await asyncio.sleep(delay) 
                        attempt += 1
                        continue
                    else:
                        print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º')
                        attempt += 1
            except aiohttp.ClientError as err:
                print(f'–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ {err}')
            except Exception as e:
                print(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {e}')
            if attempt == max_attempts:
                break
    if supplies_list_api:
        df = pd.DataFrame(supplies_list_api)
        print(f"üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è {account}")
        return df
    else:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã')
        return None
    
async def main():
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    tasks = [get_supplies_list(account, api_token) for account, api_token in load_api_tokens().items()]
    res = await asyncio.gather(*tasks)
    return pd.concat(res)