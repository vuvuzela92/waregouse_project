import asyncio
import aiohttp
from utils_warehouse import load_api_tokens, create_connection, create_insert_table_db_sync
import pandas as pd
import os
from dotenv import load_dotenv

load_dotenv()



async def get_supplies_list(account, api_token):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –ø–æ —Å–∏—Å—Ç–µ–º–µ –§–ë–°"""
    print(f"üü° –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è {account}")
    # –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
    supplies_list_api = []
    # –ê–¥—Ä–µ—Å –∑–∞–ø—Ä–æ—Å–∞
    url = 'https://marketplace-api.wildberries.ru/api/v3/supplies'
    headers = {'Authorization': api_token}
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ
    delay = 0.3
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    limit = 1000
    # –ü–∞—Ä–∞–º–µ—Ç—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    next_page = 0
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    max_attempts = 10
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempt = 0
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ http –∑–∞–ø—Ä–æ—Å–∞
    async with aiohttp.ClientSession(headers=headers) as session:
        # –¶–∏–∫–ª –∏–∑ 10 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        while attempt != max_attempts:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {'limit' : limit,
                    'next' : next_page}
            try:
                # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
                async with session.get(url, params=params) as res:
                    if res.status == 200:
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                        attempt = 0
                        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π http –∑–∞–ø—Ä–æ—Å
                        data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫
                        supplies = data['supplies']
                        # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –æ–± –õ–ö
                        for supply in supplies:
                            supply['account'] = account
                        # –î–æ–±–∞–≤–ª—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                        supplies_list_api.extend(supplies)
                        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è
                        if not supplies or data['next'] == 0:
                            break
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                        else:
                            next_page = data['next']
                            # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ê–ü–ò –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                            await asyncio.sleep(delay)
                        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(supplies_list_api)} –ø–æ—Å—Ç–∞–≤–∫–∞—Ö")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    elif res.status == 400:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        error_data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É message. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤—ã–≤–µ–¥–µ–º '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
                        error_detail = error_data.get('message', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
                        print(f"–û—à–∏–±–∫–∞ 400 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        return None 
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö 
                    elif res.status == 401:
                        print(f"–û—à–∏–±–∫–∞ 401 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                        return None
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    elif res.status == 403:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        error_data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É message. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤—ã–≤–µ–¥–µ–º '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
                        error_detail = error_data.get('message', '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
                        print(f"–û—à–∏–±–∫–∞ 403 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        return None
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                    elif res.status == 429:
                        error_data = await res.json()
                        error_detail = error_data.get('detail', '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
                        print(f"–û—à–∏–±–∫–∞ 429 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        print(f"–õ–∏–º–∏—Ç: 300 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 1 –º–∏–Ω—É—Ç—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç. –∂–¥–µ–º {delay}")
                        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await asyncio.sleep(delay) 
                        attempt += 1
                        continue
                    else:
                        print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º')
                        attempt += 1
            except aiohttp.ClientError as err:
                print(f'–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ {err}')
            except Exception as e:
                print(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {e}')
            if attempt == max_attempts:
                break
    if supplies_list_api:
        df = pd.DataFrame(supplies_list_api)
        print(f"üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è {account}")
        return df
    else:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã')
        return None
    
async def main():
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    tasks = [get_supplies_list(account, api_token) for account, api_token in load_api_tokens().items()]
    res = await asyncio.gather(*tasks)
    return pd.concat(res)


def get_dict_supply(days = 11, db_name = os.getenv('NAME_2'), db_user = os.getenv('USER_2'), db_password = os.getenv('PASSWORD_2'), db_host = os.getenv('HOST_2'), db_port = os.getenv('PORT_2')):
        # __________________________________________________________________________________________________________________________________________________________________#
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
        # __________________________________________________________________________________________________________________________________________________________________#
        query = f"""
        SELECT id, account
        FROM supplies_data
        WHERE created_at > CURRENT_DATE - INTERVAL '{days} days'
        """
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        connection = create_connection(db_name, db_user, db_password, db_host, db_port)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        df_db = pd.read_sql(query, connection)

        # —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç : —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
        df_db_dict = df_db.groupby('account')['id'].apply(list).to_dict()
        return df_db_dict


# __________________________________________________________________________________________________________________________________________________________________#
# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –í–ë
# __________________________________________________________________________________________________________________________________________________________________#
async def get_orders_in_supply(account, api_token, supply_id):
    url = f'https://marketplace-api.wildberries.ru/api/v3/supplies/{supply_id}/orders'
    orders_list_api = []
    headers = {'Authorization': api_token}
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ
    delay = 0.3
    max_attempts = 10
    # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempt = 0
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ http –∑–∞–ø—Ä–æ—Å–∞
    async with aiohttp.ClientSession(headers=headers) as session:
        if attempt != max_attempts:
            try:
                # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
                async with session.get(url) as res:
                    if res.status == 200:
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                        attempt = 0
                        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π http –∑–∞–ø—Ä–æ—Å
                        data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫
                        orders = data['orders']
                        # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –æ–± –õ–ö
                        for order in orders:
                            order['supply_id'] = supply_id
                            order['account'] = account
                        # –î–æ–±–∞–≤–ª—è—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                        orders_list_api.extend(orders)
                        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(orders_list_api)} –∑–∞–∫–∞–∑–∞—Ö")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    elif res.status == 400:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        error_data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É message. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤—ã–≤–µ–¥–µ–º '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
                        error_detail = error_data.get('message', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
                        print(f"–û—à–∏–±–∫–∞ 400 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        return None 
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö 
                    elif res.status == 401:
                        print(f"–û—à–∏–±–∫–∞ 401 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                        return None
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    elif res.status == 403:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                        error_data = await res.json()
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É message. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤—ã–≤–µ–¥–µ–º '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
                        error_detail = error_data.get('message', '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
                        print(f"–û—à–∏–±–∫–∞ 403 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        return None
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                    elif res.status == 429:
                        error_data = await res.json()
                        error_detail = error_data.get('detail', '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')
                        print(f"–û—à–∏–±–∫–∞ 429 –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {error_detail}")
                        print(f"–õ–∏–º–∏—Ç: 300 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 1 –º–∏–Ω—É—Ç—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç. –∂–¥–µ–º {delay}")
                        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await asyncio.sleep(delay) 
                        attempt += 1
                    else:
                        print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º')
                        attempt += 1
            except aiohttp.ClientError as err:
                print(f'–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ {err}')
            except Exception as e:
                print(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {e}')
    if orders_list_api:
        df = pd.DataFrame(orders_list_api)
        print(f"üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è {account}")
        return df
    else:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã')
        return None
    

async def fetch_supply_and_orders(dict_supply):
    tokens = load_api_tokens()
    all_orders = []
    
    # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    semaphore = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    async def bounded_get_orders(account, api_token, supply_id):
        async with semaphore:
            return await get_orders_in_supply(account, api_token, supply_id)
    
    tasks = []
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∫–∞–∂–¥–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏
    for account, api_token in tokens.items():
        if account in dict_supply:
            supply_ids = dict_supply[account]
            print(f"–ê–∫–∫–∞—É–Ω—Ç {account}: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(supply_ids)} –ø–æ—Å—Ç–∞–≤–æ–∫")
            
            for supply_id in supply_ids:
                tasks.append(bounded_get_orders(account, api_token, supply_id))
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for result in results:
        if isinstance(result, Exception):
            print(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {result}")
        elif isinstance(result, pd.DataFrame) and not result.empty:
            all_orders.extend(result.to_dict('records'))
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    if all_orders:
        final_df = pd.DataFrame(all_orders)
        print(f"‚úÖ –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(final_df)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤–æ–∫")
        return final_df
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        return pd.DataFrame()
    

async def main_get_supply_and_orders():
    dict_supply = get_dict_supply()
    final_df = await fetch_supply_and_orders(dict_supply)
    final_df = final_df.rename(columns={'scanPrice' : 'scan_price',
                                        'orderUid' : 'order_uid',
                                        'colorCode' : 'color_code',
                                        'createdAt' : 'created_at',
                                        'warehouseId' : 'warehouse_id',
                                        'nmId' : 'nm_id',
                                        'chrtId' : 'chrt_id',
                                        'convertedPrice' : 'converted_price',
                                        'currencyCode' : 'currency_code',
                                        'convertedCurrencyCode' : 'converted_currency_code',
                                        'cargoType' : 'cargo_type',
                                        'isZeroOrder' : 'is_zero_order'})

    pattern = r'(wild\d+)'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ str.extract –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    final_df['local_vendor_code'] = final_df['article'].str.extract(pattern)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    final_df['offices'] = final_df['offices'].astype(str)
    final_df['offices'] = final_df['offices'].str.replace('[', '').str.replace(']', '')
    # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏
    final_df['skus'] = final_df['skus'].astype(str)
    final_df['skus'] = final_df['skus'].str.replace('[', '').str.replace(']', '')
    # –£–±–∏—Ä–∞–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
    final_df['options'] = final_df['options'].astype(str)
    final_df['options'] = final_df['options'].str.replace('{', '').str.replace('}', '')
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
    final_df['price'] = final_df['price']/100
    final_df['converted_price'] = final_df['converted_price']/100
    final_df = final_df[['supply_id' ,'scan_price', 'order_uid', 'local_vendor_code', 'article', 'color_code', 'rid', 'created_at',
        'offices', 'skus', 'id', 'warehouse_id', 'nm_id', 'chrt_id', 'price',
        'converted_price', 'currency_code', 'converted_currency_code',
        'cargo_type', 'is_zero_order', 'options', 'account',
        ]]

    table_name = 'supplies_and_orders'
    columns_type = {'supply_id' : 'VARCHAR(255)',
                    'scan_price' : 'NUMERIC',
                    'order_uid' : ' VARCHAR(255)',
                    'local_vendor_code' : 'VARCHAR(255)',
                    'article' : 'VARCHAR(255)',
                    'color_code' : 'VARCHAR(255)',
                    'rid' : 'VARCHAR(255)',
                    'created_at' : 'TIMESTAMP',
                    'offices' : 'VARCHAR(255)',
                    'skus' : 'VARCHAR(255)',
                    'id' : 'BIGINT',
                    'warehouse_id' : 'INTEGER',
                    'nm_id' : 'BIGINT',
                    'chrt_id' : 'BIGINT',
                    'price' : 'NUMERIC(10,2)',
                    'converted_price' : 'NUMERIC(10,2)', 
                    'currency_code' : 'INTEGER',
                    'converted_currency_code' : 'INTEGER',
                    'cargo_type' : 'INTEGER',
                    'is_zero_order' : 'BOOLEAN',
                    'options' : 'VARCHAR(255)',
                    'account' : 'VARCHAR(255)',
                    }

    # –ö–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è UPSERT
    key_columns = ('supply_id', 'id')
    create_insert_table_db_sync(final_df, table_name, columns_type, key_columns)